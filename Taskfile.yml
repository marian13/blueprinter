version: '3'

##
# NOTE: `open` tasks only navigate/open apps. They are NOT running any other commands.
##

##
# IMPORTANT: All tasks listed in this file should be executed from the root folder.
# - https://taskfile.dev/usage/#task-directory
#
tasks:
  ##
  # NOTE: Annotate (aka AnnotateModels) options.
  # - https://github.com/ctran/annotate_models/blob/develop/lib/annotate/parser.rb
  #
  # NOTE: Same as `task lint:annotate`, but without `--frozen` option.
  # IMPORTANT: Must be kept in sync with `task lint:annotate`.
  #
  annotate:
    cmds:
      - bundle exec annotate --models --position-in-class=bottom --format=bare --exclude=tests

  ##
  # - https://guides.rubyonrails.org/active_record_migrations.html#resetting-the-database
  #
  db:reset:test:
    cmds:
      - RAILS_ENV=test bundle exec rails db:reset

  ##
  # NOTE: `docker compose run` automatically builds image if is not built yet.
  #
  docker:bash:
    cmds:
      - docker compose -f docker/development/docker-compose.yml run --rm rails bash
    interactive: true
    preconditions:
      - sh: '[ "${IN_DOCKER_CONTAINER}" != "true" ]'
        msg: This task can be invoked only from the host operating system (https://www.ibm.com/cloud/learn/containerization)

  ##
  # NOTE:
  #   `task install` is executed during image build process.
  #   But it is impossible to have access to the volumes during the image build process.
  #   So `Gemfile` changes are NOT persisted inside `Gemfile.lock`.
  #   That is why `task install` is executed for the second time by `docker compose run` since it has access to volumes.
  #   This add more minutes to `task docker:build`, but eliminates the time required to debug unmodified `Gemfile.lock` issues.
  #
  # NOTE:
  #   `docker compose up` builds all images listed in the `docker-compose.yml` and then starts all containers.
  #   This is too resource heavy most of the time, that is why `docker compose build` and `docker compose run` with Docker Compose `depends_on` are used instead.
  #
  docker:build:
    cmds:
      - docker compose -f docker/development/docker-compose.yml build rails
      - docker compose -f docker/development/docker-compose.yml run --rm rails bash -c "task install"
    preconditions:
      - sh: '[ "${IN_DOCKER_CONTAINER}" != "true" ]'
        msg: This task can be invoked only from the host operating system (https://www.ibm.com/cloud/learn/containerization)

  docker:chrome:build:
    cmds:
      - docker-compose -f docker/development/docker-compose.yml up --build --remove-orphans chrome
    preconditions:
      - sh: '[ "${IN_DOCKER_CONTAINER}" != "true" ]'
        msg: This task can be invoked only from the host operating system (https://www.ibm.com/cloud/learn/containerization)

  docker:chrome:http:open:
    cmds:
      - open http://localhost:{{.HOST_OS_CHROME_HTTP_PORT}}
    preconditions:
      - sh: '[ "${IN_DOCKER_CONTAINER}" != "true" ]'
        msg: This task can be invoked only from the host operating system (https://www.ibm.com/cloud/learn/containerization)
    requires:
      vars: [HOST_OS_CHROME_HTTP_PORT]

  docker:chrome:logs:
    cmds:
      - docker logs --follow {{.PROJECT_NAME}}_chrome
    preconditions:
      - sh: '[ "${IN_DOCKER_CONTAINER}" != "true" ]'
        msg: This task can be invoked only from the host operating system (https://www.ibm.com/cloud/learn/containerization)
    requires:
      vars: [PROJECT_NAME]

  docker:chrome:vnc:open:
    cmds:
      - open vnc://localhost:{{.HOST_OS_CHROME_VNC_PORT}}
    preconditions:
      - sh: '[ "${IN_DOCKER_CONTAINER}" != "true" ]'
        msg: This task can be invoked only from the host operating system (https://www.ibm.com/cloud/learn/containerization)
    requires:
      vars: [HOST_OS_CHROME_VNC_PORT]

  ##
  # NOTE: Importmap for Rails.
  # - https://github.com/rails/importmap-rails?tab=readme-ov-file#using-npm-packages-via-javascript-cdns
  #
  docker:importmap:pin:
    cmds:
      - docker compose -f docker/development/docker-compose.yml run --rm rails bash -c './bin/importmap pin {{.NPM_PACKAGE}}'
    preconditions:
      - sh: '[ "${IN_DOCKER_CONTAINER}" != "true" ]'
        msg: This task can be invoked only from the host operating system (https://www.ibm.com/cloud/learn/containerization)

  docker:rspec:
    cmds:
      - docker compose -f docker/development/docker-compose.yml run --rm rails bash -c 'bundle exec rspec'
    interactive: true
    preconditions:
      - sh: '[ "${IN_DOCKER_CONTAINER}" != "true" ]'
        msg: This task can be invoked only from the host operating system (https://www.ibm.com/cloud/learn/containerization)

  docker:server:
    cmds:
      - rm tmp/pids/server.pid 2> /dev/null || true
      ##
      # NOTE: `-b 0.0.0.0` makes Rails server accessible from all hosts.
      # - https://stackoverflow.com/a/29084070/12201472
      #
      - |
        docker compose \
          -f docker/development/docker-compose.yml \
          run \
          --rm \
          --publish {{.RAILS_PORT}}:{{.RAILS_PORT}} \
          rails \
          bash -c '
            bundle exec rails db:create \
              && bundle exec rails db:migrate \
              && bundle exec rails server --port {{.RAILS_PORT}} -b 0.0.0.0
          '
    interactive: true
    preconditions:
      - sh: '[ "${IN_DOCKER_CONTAINER}" != "true" ]'
        msg: This task can be invoked only from the host operating system (https://www.ibm.com/cloud/learn/containerization)
    requires:
      vars: [RAILS_PORT]

  docker:server:open:
    cmds:
      - open -na "Google Chrome" --args --new-window --incognito "http://localhost:{{.RAILS_PORT}}"
    requires:
      vars: [RAILS_PORT]

  docker:turnip:
    cmds:
      - |
        docker compose \
          -f docker/development/docker-compose.yml \
          run \
          --rm \
          --publish {{.TURNIP_RAILS_PORT}}:{{.TURNIP_RAILS_PORT}} \
          rails \
          bash -c 'task turnip'
    interactive: true
    preconditions:
      - sh: '[ "${IN_DOCKER_CONTAINER}" != "true" ]'
        msg: This task can be invoked only from the host operating system (https://www.ibm.com/cloud/learn/containerization)
    requires:
      vars: [TURNIP_RAILS_PORT]

  ##
  # NOTE: Dev only command.
  # NOTE: macOS specific command.
  # NOTE: Used by `tmuxinator`.
  #
  docker:start:
    cmds:
      - open -a Docker

  ##
  # NOTE: Dev only command.
  #
  editor:open:
    cmds:
      - code .

  ##
  # Generate Entity-Relationship Diagrams for Rails applications.
  # - https://github.com/voormedia/rails-erd
  #
  # TODO: Fix `Failed: NoMethodError: undefined method `direct_descendants' for class ActionText::Record`.
  # - https://github.com/voormedia/rails-erd/issues/377
  #
  erd:
    cmds:
      - bundle exec erd

  ##
  # NOTE: Dev only command.
  # NOTE: macOS specific command.
  #
  github:open:
    cmds:
      - open -na "Google Chrome" --args --new-window --incognito "https://github.com/marian13/blueprinter"

  install:
    cmds:
      - bundle install

  ##
  # NOTE: Same as `task annotate`, but with `--frozen` option for linting.
  # IMPORTANT: Must be kept in sync with `task annotate`.
  #
  lint:annotate:
    cmds:
      - bundle exec annotate --models --position-in-class=bottom --format=bare --exclude=tests --frozen

  ##
  # Rake task that allows to verify whether schema.rb and migration files have been correctly committed.
  # - https://github.com/kufu/db_schema_checker
  #
  lint:db:schema:
    cmds:
      - RAILS_ENV=test bundle exec rails db:migrate:reset:check

  server:logs:test:
    cmds:
      - touch log/test.log && tail -f log/test.log

  ##
  # NOTE: Dev only command.
  #
  tmuxinator:start:
    cmds:
      - direnv exec . tmuxinator start blueprinter --project-config=.dev/.tmuxinator.yml

  ##
  # NOTE: Dev only command.
  #
  tmuxinator:stop:
    cmds:
      - direnv exec . tmuxinator stop blueprinter --project-config=.dev/.tmuxinator.yml

  ##
  # NOTE: RSpec supports multiple formatters.
  # - https://github.com/rspec/rspec-core/commit/a5f9ffd270ff8d450d9460f14b269b48685c4567
  #
  # NOTE: Turnip HTML formatter.
  # - https://github.com/gongo/turnip_formatter
  #
  # TODO: Cucumber-like logs for Turnip.
  # - https://github.com/jnicklas/turnip?tab=readme-ov-file#rspec-custom-formatters
  #
  turnip:
    cmds:
      - |
        bundle exec rspec \
          --require turnip/rspec \
          --require turnip_formatter \
          --format progress \
          --format RSpecTurnipFormatter \
          --out tmp/turnip_report.html \
          spec/features
    interactive: true
    requires:
      vars: [TURNIP_RAILS_PORT]

  turnip:open:
    cmds:
      - open tmp/turnip_report.html
